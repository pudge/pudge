#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

use File::Basename 'basename';
use Getopt::Long;
use Pod::Usage;

=pod

=head1 NAME

xh - run commands across multiple hosts

=head1 SYNOPSIS

    xh [--maint] [--balancer] [--reboot] [--checks] [--tripwire] [--no_mp] [--help] [--exit] CMD [HOSTS_FILE]

    # Example:
    xh -mbrcte 'sudo apt update && sudo apt upgrade --autoremove -y' security_hosts_bionic


=head1 DESCRIPTION

xh will run a command across all hosts in a file, optionally:

    * Exiting the multiplexer after running the command (`--exit`)
    * Turning maintenance mode on in Zabbix (`--maint`)
    * Disabling hosts in the balancer before running command (`--balancer`)
    * Rebooting hosts (and sleeping 30 seconds before continuing) after the command is run (`--reboot`)
    * Re-enabling hosts in the balancer (`--balancer`)
    * Rebuilding tripwire DB (`--tripwire`)
    * Running security patch checks (`--checks`)

If a supported multiplexer is available, commands can be run across groups of hosts simultaneously. This support can be disabled with `--no_mp`.

=head1 OPTIONS

=over 4

=item * 'h|help' - Show the documentation

=item * 'm|maint' - Put all hosts in maintenance in Zabbix

=item * 'b|balancer' - Enable/disable balanced hosts in the balancer

=item * 'r|reboot' - Reboot host after run

=item * 't|tripwire' - Rebuild tripwire DB after run/reboot

=item * 'c|checks' - Recheck for security patches after run/reboot

=item * 'e|exit' - Exit multiplexer after run

=item * 'P|no_mp' - Turn off multiplexer support

=item * 'W|no_wait' - Do not wait in between commands (option disabled if `--balancer` is on, or if multiplexer support is on)

=back

=head1 REQUIREMENTS

=over 4

=item * tools repo (zapi, balancer, get_env)

=item * ansible repo (tripwire)

=item * .zabbix file (zapi credentials)

=item * security_hosts files (see below)

=back

=head2 OPTIONAL

=over 4

=item * tm (from pudge/pudge GitHub repo, to use tmux multiplexer support)

=back


=head2 HOSTS FILE

The security hosts file is a list of hosts, one per line, with the environment included, e.g., `jump-01.prod`. The hosts will be run in order. Empty lines, or header lines, will run the hosts as a group, up to $max hosts.

If the header line matches `# \d+_balancer`, and `--balancer` is set, then each host will be disabled/enabled in the balancer before/after the run.

Example:

    # 00_first
    host-01.pud

    # 01_balancer
    api-01.pud
    web-01.pud
    api-03.pud
    web-03.pud

    api-02.pud
    web-02.pud
    api-04.pud
    web-04.pud

    # 02_last
    host-02.pud

First, host-01 will be run. Then, if `--balancer` is set, the next four hosts will be disabled in the balancer, and then those hosts will be run, and re-enabled in the balancer. Then the same for the next four hosts. Finally, host-02 will be run.

=head1 CAVEATS

Note that if you are connected through a host, and rebooting that host, you will lose your connection. In such a situation, better to run them separately. For example, if connected through foo-01 and running on bar-01, put those hosts in `security_hosts_last`, and then run:

    bar-01:~$ xh -maint -balancer -reboot -tripwire CMD security_hosts
    bar-01:~$ xh -maint -balancer -tripwire CMD security_hosts_last
    bar-01:~$ sudo reboot
    [disconnected from bar-01]
    foo-01:~$ sudo reboot
    [disconnected from foo-01]

=head1 TODO

=over 4

=item * screen multiplexer support

=back

=cut

our $NAME = basename($0);
our($MAINTENANCE_ID, $ENV);
my @multiplexers = qw(tm);
my $max = 9;

our($balancer, $tripwire, $checks, $reboot, $maint, $exit, $no_mp, $no_wait,
    @cmd, $file, $multiplexer, @multi_opts);
init();

my(@hosts, %balance, @all_hosts);

get_hosts($file);
maint_on(\@all_hosts);
do_all(\@hosts);
maint_off();

sub do_all {
    say "==> $NAME starting ...\n";
    for my $group (@hosts) {
        beep() unless $no_wait;

        say '# ', join ', ', @$group unless $no_wait;

        balance('-d', $group);
        run(\@cmd, $group);
        reboot($group);
        balance('-e', $group);
        tripwire($group);
        checks($group);

        beep() unless $no_wait;
    }
    say "\n$NAME complete.";
}

sub get_hosts {
    my($file) = @_;
    open my $host_fh, '<', "$ENV{HOME}/$file" or die "Cannot open `$ENV{HOME}/$file`: $!";

    my $i = 0;
    my $balance;
    for my $host (<$host_fh>) {
        chomp $host;
        if (!$host || $host =~ /#/) {
            if ($host =~ /# \d+_balancer/) {
                $balance = 1;
            }
            elsif ($host =~ /# \d+_\w/) {
                $balance = 0;
            }
            $i = 0 if $host eq '';
            next;
        }

        if ($i == 0) {
            push @hosts, [];
        }

        $balance{$host} = 1 if $balancer && $balance;
        push @{$hosts[-1]}, $host;
        push @all_hosts, $host;
        $i++;
        $i = 0 if $i == $max;
    }
}

sub maint_on {
    my($hosts) = @_;
    return unless $maint && $hosts && @$hosts;
    get_env();
    my $hosts_str = join ' ', @$hosts;
    my $result = qx!/opt/bin/zapi.pl -e "$ENV" maint -t 60 $hosts_str!;
    if ($result =~ /'maintenanceids' => \[\s*'(\d+)\'\s*\]/s) {
        $MAINTENANCE_ID = $1;
        say "created maintenance $MAINTENANCE_ID in zabbix";
    }
}

sub maint_off {
    return unless $maint && $ENV && $MAINTENANCE_ID;
    my $result = qx!/opt/bin/zapi.pl -e "$ENV" maint -d $MAINTENANCE_ID!;
    if ($result =~ /\Q$MAINTENANCE_ID\E/) {
        say "deleted maintenance $MAINTENANCE_ID in zabbix";
    }
    else {
        say "unexpected result:\n$result\n";
    }
}

sub reboot {
    my($group) = @_;
    return unless $reboot && $group && @$group;
    say "rebooting hosts ...";
    run(['sudo reboot'], $group, 1);
    sleep 30;
}

sub tripwire {
    my($group) = @_;
    return unless $tripwire && $group && @$group;
    my $trip_hosts = join ",", @$group;
    beep();
    system qq!ansible-playbook -v --ask-vault-pass -i $ENV{ANSIBLE_HOME}/inventory $ENV{ANSIBLE_HOME}/site.yml --limit $trip_hosts -t rebuild_tripwire_db!;
}

sub checks {
    my($group) = @_;
    return unless $checks && $group && @$group;
    say "checking hosts ...";
    run(['sudo /opt/bin/security_patch_list.pl'], $group, 1);
}

sub balance {
    my($action, $hosts) = @_;
    my $balanced = 0;
    for my $host (@$hosts) {
        if ($balance{$host}) {
            $balanced = 1;
        }
    }

    if ($balanced) {
        my $action_str = $action eq '-e' ? 'enable' : 'disable';
        if ($action eq '-d') {
            say "[ENTER] to $action_str balancer and proceed ";
            <>;
        }
    }
    elsif ($action eq '-d' && !$no_wait) {
        say "[ENTER] to proceed ";
        <>;
    }

    my @balance_hosts;
    for my $host (@$hosts) {
        if ($balance{$host}) {
            (my $short = $host) =~ s/\.\w+$//;
            push @balance_hosts, $short;
        }
    }
    system '/opt/bin/balancer.sh', $action, @balance_hosts if @balance_hosts;

    say '' unless $no_wait;
}

sub get_env {
    return $ENV if $ENV;
    chomp($ENV = `/opt/bin/get_env.sh`);
    unless ($ENV) {
        warn "No env found for maintenance, exiting";
        exit;
    }
    return $ENV;
}

sub beep {
    print "\007";
}

sub has_multiplexer {
    my $multiplexer = '';
    return $multiplexer if $no_mp;
    for my $mp (@multiplexers) {
        `which \Q$mp\E`;
        unless ($?) {
            $multiplexer = $mp;
            last;
        }
    }
    return $multiplexer;
}

sub run {
    my($cmd, $group, $do_exit) = @_;
    if ($multiplexer) {
        my @opts = @multi_opts;
        if ($do_exit && !$exit) {
            if ($multiplexer eq 'tm') {
                unshift @opts, '-e';
            }
        }
        system $multiplexer => @opts, @$cmd, @$group;
    }
    else {
        for my $host (@$group) {
            say join ' ', '#', ssh => $host, @$cmd;
            system ssh => $host, @$cmd;
        }
    }
}

sub init {
    Getopt::Long::Configure('bundling');
    GetOptions(
        'h|help',       sub { pod2usage(-verbose => 2) },
        'm|maint',      \$maint,
        'b|balancer',   \$balancer,
        'r|reboot',     \$reboot,
        't|tripwire',   \$tripwire,
        'c|checks',     \$checks,
        'e|exit',       \$exit,
        'P|no_mp',      \$no_mp,
        'W|no_wait',    \$no_wait,
    ) or pod2usage(-verbose => 1);

    (my $cmd, $file) = (shift(@ARGV), shift(@ARGV));
    $file //= 'security_hosts';

    $multiplexer = has_multiplexer();

    @cmd = $cmd ? ($cmd) : ();
    if (@cmd && $multiplexer eq 'tm') {
        @multi_opts = ( ($exit ? '-e' : ()), '-c' );
    }

    undef $no_wait if $balancer || $multiplexer;
}

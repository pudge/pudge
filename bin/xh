#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

use Data::Dumper; $Data::Dumper::Sortkeys=1;
use File::Basename 'basename';
use File::Temp ();
use Getopt::Long;
use Pod::Usage;

=pod

=head1 NAME

xh - run commands across multiple hosts

=head1 SYNOPSIS

    xh [OPTIONS] CMD [HOSTS_FILE|HOST_LIST|HOST_SELECTOR]

    # Example:
    xh -mxblrtc 'sudo apt update && sudo apt upgrade --autoremove -y' security_hosts_bionic

    # if NO OPTIONS provided, use defaults. this:
    xh bionic
    # is same as this:
    xh -smxblrtc 'sudo apt update && sudo apt upgrade --autoremove -y' bionic

=head1 DESCRIPTION

xh will run a command across selected hosts, optionally:

    * Turning maintenance mode on in Zabbix (`--maint`)
    * Disabling hosts in the balancer before running command (`--balancer`)
    * Disabling hosts in the ELB before running command (`--elb`)
    * Rebooting hosts (and sleeping before continuing) after the command is run (`--reboot`)
    * Re-enabling hosts in the balancer (`--balancer`)
    * Rebuilding tripwire DB (`--tripwire`)
    * Running security patch checks (`--checks`)

If a supported multiplexer is available, commands can be run across groups of hosts simultaneously. This support can be disabled with `--no_mp`.

=head1 OPTIONS

=over 4

=item * 'h|help' - Show the documentation

=item * 's|selector' - Ansible host selector string

=item * 'm|maint' - Put all hosts in maintenance in Zabbix

=item * 'x|command' - Pass in command (instead of default)

=item * 'b|balancer' - Enable/disable balanced hosts in the balancer

=item * 'l|elb' - Enable/disable hosts in the ELB

=item * 'r|reboot' - Reboot host after run

=item * 't|tripwire' - Rebuild tripwire DB after run/reboot

=item * 'c|checks' - Recheck for security patches after run/reboot

=item * 'H|hosts' - Pass in hosts (instead of filename)

=item * 'e|exit' - Exit multiplexer after run

=item * 'P|no_mp' - Turn off multiplexer support

=item * 'W|no_wait' - Do not wait in between commands (option disabled if `--balancer` is on, or if multiplexer support is on)

=back

=head1 REQUIREMENTS

=over 4

=item * tools repo (zapi, balancer, get_env, elb)

=item * ansible repo (tripwire)

=item * .zabbix file (zapi credentials)

=item * aws credentials set in env (for --elb option)

=item * security_hosts files (see below)

=back

=head2 OPTIONAL

=over 4

=item * tm (from pudge/pudge GitHub repo, to use tmux multiplexer support)

=back


=head2 HOSTS

By default, xh will attempt to load a file called F<security_hosts> (see below for format). But the preferred way is using the C<-s> option with an ansible selector, such as C<all>, C<jammy>, C<bionic>, etc. Internally, xh will look for members of that selector that need to be handled in the balancers/ELBs/ALBs.

=head2 Hosts Fle Format

The hosts file is a list of hosts, one per line, with the environment included, e.g., `jump-01.prod`. The hosts will be run in order. Empty lines, or header lines, will run the hosts as a group, up to $max hosts.

If the header line matches `# \d+_balancer`, and `--balancer` is set, then each host will be disabled/enabled in the balancer before/after the run.

Example:

    # 00_first
    host-01.pud

    # 01_balancer
    api-01.pud
    web-01.pud
    api-03.pud
    web-03.pud

    api-02.pud
    web-02.pud
    api-04.pud
    web-04.pud

    # 02_elb
    sftp-01.pud

    sftp-02.pud

    # 03_last
    host-02.pud

First, host-01 will be run. Then, if `--balancer` is set, the next four hosts will be disabled in the balancer, and then those hosts will be run, and re-enabled in the balancer. Then the same for the next four hosts. Finally, host-02 will be run.

=head1 CAVEATS

Note that if you are connected through a host, and rebooting that host, you will lose your connection. In such a situation, better to run them separately. For example, if connected through foo-01 and running on bar-01, put those hosts in `security_hosts_last`, and then run:

    bar-01:~$ xh -maint -balancer -reboot -tripwire CMD security_hosts
    bar-01:~$ xh -maint -balancer -tripwire CMD security_hosts_last
    bar-01:~$ sudo reboot
    [disconnected from bar-01]
    foo-01:~$ sudo reboot
    [disconnected from foo-01]

=head1 TODO

=over 4

=item * `screen` multiplexer support

=item * figure out balancer/elb stuff for hosts with `-H` option

=back

=head1 NOTES

I do not know why this is called "xh".

=cut

our $NAME = basename($0);
our($MAINTENANCE_ID, $ENV);
my @multiplexers = qw(tm);
my $max = 9;
my $default_command = 'sudo apt update && sudo apt upgrade --autoremove -y';

our($balancer, $elb, $first_elb, $tripwire, $checks, $reboot, $maint, $exit, $hosts, $no_mp, $no_wait,
    $selector, $command, $tripwire_pass_fh, $tripwire_pass_file, @cmd, $multiplexer, @multi_opts);

my(@hosts, %balance, %elb, %pause, @last, @all_hosts);
init();

#print Dumper \%balance, \%elb, \%pause, \@hosts;

maint_on(\@all_hosts);
do_all(\@hosts);
maint_off();

say "skipped hosts (run on alternate hosts): @last\n" if @last;
exit;

sub do_all {
    say "==> $NAME starting ...\n";
    say "** REMINDER: watch the clock for tripwire (at 0 and 30 minutes) **\n";

    # get the first elb hosts started
    if ($first_elb) {
        say '# pre-draining ', join ', ', @$first_elb;
        elb('-d', $first_elb, 'no wait');
        say '';
    }

    for my $group (@hosts) {
        beep() unless $no_wait;

        say '### ', join ', ', @$group unless $no_wait;

        elb('-d', $group);
        balance('-d', $group);

        run(\@cmd, $group);
        reboot($group);

        elb('-r', $group, 'no wait');
        balance('-e', $group);

        tripwire($group);
        checks($group);

        elb('-r', $group);

        beep() unless $no_wait;
    }

    say "==> $NAME complete.\n";
}

sub _get_ansible_hosts {
    my($sel) = @_;
    my @get_hosts = sort split "\n", qx(get_hosts.sh \Q$sel\E);
    my(@hosts1, @hosts2);

    for my $host (@get_hosts) {
        if ($host =~ /-(\d+)\.\w+$/) {
            my $num = $1;
            if ($num % 2) {
                push @hosts1, $host;
            }
            else {
                push @hosts2, $host;
            }
        }
        else {
            push @hosts1, $host;
        }
    }

    return [@hosts1, '', @hosts2];
}

sub get_ansible_hosts {
    my($sel) = @_;

    my $main  = _get_ansible_hosts($sel . ':!apache:!elb');
    my $bals  = { hosts => _get_ansible_hosts($sel . ':&apache:!elb'), balance => 1 };
    my $elbs  = { hosts => _get_ansible_hosts($sel . ':&elb'),         elb     => 1 };
    my $pause = [];
    my $first = [];

    for my $host (@$main) {
        if ($host =~ /^job-/) {
            push @$pause, $host, '';
            $pause{$host} = 1;
        }
        elsif ($host =~ /^(?:control|jump)-01/) {
            push @last, $host;
        }
        else {
            push @$first, $host;
        }
    }

    my @groups = ($pause, $first, $bals, $elbs);

    for my $type (@groups) {
        if (ref $type eq 'ARRAY') {
            $type = { hosts => $type };
        }
        my $i = 0;
        for my $host (@{ $type->{hosts} }) {
            if ($host eq '') {
                $i = 0;
                next;
            }

            if ($i == 0) { # start new group
                push @hosts, [];
            }

            $balance{$host} = 1 if $type->{balance} && $balancer;
            $elb{$host} = 1 if $type->{elb} && $elb;
            $first_elb ||= $hosts[-1] if $type->{elb} && $elb;
            push @{$hosts[-1]}, $host;
            push @all_hosts, $host;
            $i++;
            $i = 0 if $i == $max;
        }
    }
}

sub get_file_hosts {
    my($file) = @_;
    my $host_fh;
    if ($file eq '-') {
        $host_fh = \*STDIN;
    }
    else {
        open $host_fh, '<', "$ENV{HOME}/$file" or die "Cannot open `$ENV{HOME}/$file`: $!";
    }
    my @hosts_input = <$host_fh>;

    my $i = 0;
    my($do_balance, $do_elb);
    for my $host (@hosts_input) {
        chomp $host;
        if (!$host || $host =~ /#/) {
            if ($host =~ /# \d+_balancer/) {
                $do_balance = 1;
                $do_elb = 0;
            }
            elsif ($host =~ /# \d+_elb/) {
                $do_balance = 0;
                $do_elb = 1;
            }
            elsif ($host =~ /# \d+_\w/) {
                $do_balance = 0;
                $do_elb = 0;
            }
            $i = 0 if $host eq '';
            next;
        }

        if ($i == 0) { # start new group
            push @hosts, [];
        }

        $balance{$host} = 1 if $do_balance && $balancer;
        $elb{$host} = 1 if $do_elb && $elb;
        $first_elb ||= $hosts[-1] if $do_elb && $elb;
        push @{$hosts[-1]}, $host;
        push @all_hosts, $host;
        $i++;
        $i = 0 if $i == $max;
    }
}

sub maint_on {
    my($hosts) = @_;
    return unless $maint && $hosts && @$hosts;
    get_env();
    my $hosts_str = join ' ', @$hosts;
    my $result = qx!/opt/bin/zapi.pl -e "$ENV" maint -t 90 $hosts_str!;
    if ($result =~ /'maintenanceids' => \[\s*'(\d+)\'\s*\]/s) {
        $MAINTENANCE_ID = $1;
        say "created maintenance $MAINTENANCE_ID in zabbix";
    }

    my @time = localtime();
    my $sleep_sec = 60-$time[0];
    say "sleeping $sleep_sec for maintenance";
    sleep $sleep_sec+1;
}

sub maint_off {
    return; # for now, not deleting maintenance, but just letting it expire
    return unless $maint && $ENV && $MAINTENANCE_ID;
    my $result = qx!/opt/bin/zapi.pl -e "$ENV" maint -d $MAINTENANCE_ID!;
    if ($result =~ /\Q$MAINTENANCE_ID\E/) {
        say "deleted maintenance $MAINTENANCE_ID in zabbix";
    }
    else {
        say "unexpected result:\n$result\n";
    }
}

sub reboot {
    my($group) = @_;
    return unless $reboot && $group && @$group;
    say "rebooting hosts ...";
    run(['sudo reboot'], $group, 1);
    sleep 120;
}

sub tripwire {
    my($group) = @_;
    return unless $tripwire && $group && @$group;
    my $trip_hosts = join ",", @$group;
    beep();
    my $cmd = qq!ansible-playbook -v --vault-password-file=$tripwire_pass_file -i $ENV{ANSIBLE_HOME}/inventory $ENV{ANSIBLE_HOME}/site.yml --limit $trip_hosts -t rebuild_tripwire_db!;
    print STDERR "# $cmd\n";
    system $cmd;
}

sub checks {
    my($group) = @_;
    return unless $checks && $group && @$group;
    say "checking hosts ...";
    run(['sudo /opt/bin/security_patch_list.pl'], $group, 1);
    say '';
}

sub balance {
    my($action, $hosts) = @_;
    my $balanced = 0;
    for my $host (@$hosts) {
        if ($balance{$host}) {
            $balanced = 1;
            last;
        }
    }

    if ($balanced) {
        my $action_str = $action eq '-e' ? 'enable' : 'disable';
        if ($action eq '-d') {
            local $| = 1;
            print "[ENTER] to $action_str hosts in balancer and proceed ";
            <>;
        }
    }
    elsif ($action eq '-d' && !$no_wait) {
        local $| = 1;
        print "[ENTER] to proceed ";
        <>;
    }

    my @balance_hosts;
    for my $host (@$hosts) {
        if ($balance{$host}) {
            (my $short = $host) =~ s/\.\w+$//;
            push @balance_hosts, $short;
        }
    }
    system '/opt/bin/balancer.sh', $action, @balance_hosts if @balance_hosts;

    say '' unless $no_wait;
}

sub elb {
    my($action, $hosts, $no_wait) = @_;

    my $balanced = 0;
    for my $host (@$hosts) {
        if ($elb{$host}) {
            $balanced = 1;
            last;
        }
    }

    if ($balanced) {
        my $action_str = $action eq '-r' ? 'register' : 'deregister';
        if ($action eq '-d') {
            local $| = 1;
            print "[ENTER] to $action_str hosts in ELB and " . ($no_wait ? '' : 'wait, then ') . 'proceed ';
            <>;
        }
        else {
            say "Registering hosts in ELB" . ($no_wait ? '' : ' and waiting');
        }
    }

    my @balance_hosts;
    for my $host (@$hosts) {
        if ($elb{$host}) {
            push @balance_hosts, $host;
        }
    }

    system '/opt/bin/elb', $action, $_ for @balance_hosts; # register/deregister all hosts up front
    unless ($no_wait) { # wait for all to finish
        system '/opt/bin/elb', $action, '-w', $_ for @balance_hosts;
    }
}

sub get_env {
    return $ENV if $ENV;
    chomp($ENV = `/opt/bin/get_env.sh`);
    unless ($ENV) {
        warn "No env found for maintenance, exiting";
        exit;
    }
    return $ENV;
}

sub beep {
    print "\007";
}

sub has_multiplexer {
    my $multiplexer = '';
    return $multiplexer if $no_mp;
    for my $mp (@multiplexers) {
        `which \Q$mp\E`;
        unless ($?) {
            $multiplexer = $mp;
            last;
        }
    }
    return $multiplexer;
}

sub run {
    my($cmd, $group, $do_exit) = @_;
    if ($multiplexer) {
        my @opts = @multi_opts;
        if ($do_exit && !$exit && !$pause{$group->[0]}) {
            if ($multiplexer eq 'tm') {
                unshift @opts, '-E';
            }
        }
        say join ' ', '#', @$cmd;
        system $multiplexer => @opts, @$cmd, @$group;
    }
    else {
        for my $host (@$group) {
            say join ' ', '#', ssh => $host, @$cmd;
            system ssh => $host, @$cmd;
        }
    }
}

sub init {
    Getopt::Long::Configure('bundling');
    GetOptions(
        'h|help',       sub { pod2usage(-verbose => 2) },
        's|selector',   \$selector,
        'm|maint',      \$maint,
        'x|command',    \$command,
        'b|balancer',   \$balancer,
        'l|elb',        \$elb,
        'r|reboot',     \$reboot,
        't|tripwire',   \$tripwire,
        'c|checks',     \$checks,
        'e|exit',       \$exit,
        'H|hosts',      \$hosts,
        'P|no_mp',      \$no_mp,
        'W|no_wait',    \$no_wait,
    ) or pod2usage(-verbose => 1);

    # if NO options are true, use default options
    unless (grep $_, $maint, $command, $balancer, $elb, $reboot, $tripwire, $checks, $exit, $no_mp, $no_wait) {
        $selector = $maint = $balancer = $elb = $reboot = $tripwire = $checks = 1;
    }

    # if NO command is provided, use default command
    my $cmd = $command ? shift(@ARGV) : $default_command;
    if ($hosts) {
        @hosts = [@ARGV];
    }
    elsif ($selector) {
        get_ansible_hosts(shift @ARGV // '');
    }
    else {
        get_file_hosts(shift(@ARGV) // 'security_hosts');
    }
    undef @ARGV;

    $multiplexer = has_multiplexer();

    @cmd = $cmd ? ($cmd) : ();
    if (@cmd && $multiplexer eq 'tm') {
        @multi_opts = ( ($exit ? '-E' : ()), '-c' );
    }

    undef $no_wait if $balancer || $multiplexer;

    die "No AWS env set (required for --elb option)" if $first_elb && !$ENV{AWS_ACCESS_KEY_ID};
    if ($tripwire) {
        system(stty => '-echo');
        print "Vault password: ";
        my $pass = <STDIN>;
        system(stty => 'echo');
        print "\n";
        $tripwire_pass_fh = File::Temp->new(UNLINK => 1);
        print $tripwire_pass_fh $pass;
        $tripwire_pass_file = $tripwire_pass_fh->filename;
    }
}

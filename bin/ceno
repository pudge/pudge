#!/usr/bin/perl

eval 'exec /usr/local/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use 5.006;
use strict;
use warnings;

use File::Basename;
use File::Spec::Functions;
use IO::Socket;

#
# Configuration section
#
# make settable from config file
our($mac_host, $backup, $view);
my($ssh_client) = ($ENV{SSH_CONNECTION} || $ENV{SSH_CLIENT});
chomp $ssh_client;
$ssh_client =~ s/^([\w\.]+).*$/$1/ if $ssh_client;
$mac_host = $ENV{CENO_HOST} || 'yourhost.example.com'; # Change to name of your editor

#
# No user serviceable parts below
#
our($PROTOCOL_VERSION, $VERSION, $PROGNAME);
($VERSION) = ' $Revision: 1.1 $ ' =~ /\$Revision:\s+([^\s]+)/;
$PROGNAME = basename($0);
$PROTOCOL_VERSION = '0100';

eval {  # Override above preferences
	my $file = catfile($ENV{HOME}, '.cenorc');
	do $file if -e $file;
};

my $filelabel;
$mac_host = $ssh_client if $ssh_client;

$view = 1 if $0 =~ /view$/;

sub usage { "Usage: $PROGNAME [-iext] [-h host] [-v] [-l label] file" }
die usage() unless $view || defined $ARGV[0];

while (@ARGV) {
	if ($ARGV[0] =~ /^-i(.*)/) {
		$backup = $1 ne '' ? $1 : '~';
		shift;
	} elsif ($ARGV[0] eq '-l') {
		shift;
		$filelabel = shift;
	} elsif ($ARGV[0] eq '-h') {
		shift;
		$mac_host = shift;
	} elsif ($ARGV[0] eq '-v') {
		$view = 1;
		shift;
	} elsif ($ARGV[0] eq '-s') {
		$mac_host = $ssh_client;
		shift;
	} else {
		last;
	}
}

sub readlen {
	my($sock, $len) = @_;
	my($data);
	sysread($sock, $data, $len) or return;
	while (length($data) < $len) {
		sysread($sock, $data, $len, length($data)) or return undef;
	}
	die "Peer aborted editing: $!.\n" unless defined $data;
	return $data;
}

die usage() unless eof(ARGV);
$view = 1 unless $ARGV[0];
my $out = $ARGV[0] || 'temp';
my($label, $dir) = fileparse($out);
$label = $filelabel if $filelabel;

if (! -f $out) {
	die "File '$out' does not exist.\n" if $view && $ARGV[0];
	die "Directory '$dir' does not exist.\n" unless -d $dir;
}

my $sock = new IO::Socket::INET (
	Type		=> SOCK_STREAM,
	Proto		=> 'tcp',
	PeerAddr	=> $mac_host,
	PeerPort	=> 2305
) or die "Could not connect to peer '$mac_host' (Cenotaph might not be running): $!.\n";

$sock->autoflush(1);

my $old = '';
if (!$ARGV[0] || -f $out) {
	local $/;
	$old = <>;
# was for Mac OS; still necessary?
#	$old =~ s/\012/\015/g;
}

my $reply;
print $sock pack('A4NN', $PROTOCOL_VERSION, 0, length($label)),
	$label, pack('N', length($old));
$reply = readlen $sock, 8;

print $sock $old;

exit if $view; # Our job is done

# wait for new file
$reply = readlen $sock, 4;
my($length) = unpack('N', $reply);

my $new = readlen $sock, $length;
$new //= '';
#$new =~ s/\015/\012/g;

length($new) >= $length or die "Error on file transfer.\n";
exit if $new eq $old;

my $mode;
if (defined $backup && length $backup) {
	$mode = (stat $out)[2];
	rename $out, "$out$backup" or die "Could not create backup file: $!.\n";
}

open my $fh, '>', $out or die "Could not save file: $!.\n";
print $fh $new;
close $fh or die "Could not save file properly: $!.\n";

if (defined $backup) {
	chmod $mode, $out or warn "Could not set mode: $!.\n";
}

__END__

=head1 NAME

cenotaph, ceno, cenoview - Edit remote files locally

=head1 DESCRIPTION

cenotaph allows local editing of remote files.  Unlike many systems
that allow opening remote files from the local box, cenotaph opens
a remote file TO the local box.

F<cenotaph> is the server running on the local box, and F<ceno> is
the client running on the remote box.


=head2 cenotaph

To set up F<cenotaph>, just run the program on the local box where the
files will be edited.  By default, the program is set to open the files
using C<bbedit -w>.  To change this, use a F<.cenorc> file in your $HOME
and define C<$editor> and C<$edflags> appropriately.

Note that this will likely only work well with a GUI editor that can open
files from the command line, and wait until the files are edited.

F<cenotaph>, when run, will wait for incoming connections from a remote
box, initiated with F<ceno>.  It will open the file sent by F<ceno> in
the selected editor.  Once the file is edited, it will wait for the editor
to return, and then send the modified file back to the remote box,
which will save the file with the changes.

=head2 ceno

To use F<ceno>, just use it as a normal editor, typing C<ceno filename>.

Options available to ceno are:

=over 4

=item C<i> I<EXT>

Specify a backup extension (e.g., "~" or ".bak") to save the original file
with.  Otherwise, original file will be overwritten.  This can be set to a
default in F<.cenorc> with C<$backup>.

=item C<h> I<HOST>

Specify the host of the F<cenotaph> server (e.g., "yourhost.example.com").
If not supplied, C<$mac_host> in F<.cenorc> will be used, else
CENO_HOST in your environment will be used.  The host must be supplied
in at least one of those ways.

=item C<v>

This option will open the file to the F<cenotaph> server and return
immediately, without allowing edits.  It is the same as using the
F<cenoview> program.

=back


=head2 cenoview

F<cenoview> is merely a symbolic link to F<ceno> that opens the file
to the F<cenotaph> server and returns immediately, without allowing
edits.  It is the same as using the C<v> option with F<ceno>.  The
only F<ceno> option that is useful with F<cenoview> is the C<h> option.


=head1 SECURITY

There is no built-in security.  No passwords or keys are used.  It is highly
recommended to allow only specific IP addresses access to the port used
by the cenotaph server (2305).  If you are that concerned about security
that you want something more, either supply patches or don't use it.


=head1 HISTORY

Cenotaph was written by Matthias Neeracher for editing files on a Unix
box on a Mac OS machine.  His server was written in C++ for Mac OS,
and used the Mac OS API to open the file directly into BBEdit.  His remote
client was in Perl.

For this version, the server has been rewritten in Perl and should work on
any system (patches welcome), although it may not work with many editors.
The client is basically the same, though it's been polished up.  It
should work fine with the Mac OS Cenotaph (if you have it ... if you want it,
I can consider releasing the source for it).


=head1 SEE ALSO

L<ceno>, L<perl>.


=head1 VERSION

$Id: cenotaph.pod.src,v 1.1 2003/09/17 23:01:19 pudge Exp $


#!/usr/bin/perl
use warnings;
use strict;
use feature ':5.10';

use Data::Dumper; $Data::Dumper::Sortkeys=1;
use Getopt::Long;
use JSON::XS qw(decode_json encode_json);

my(@ids, $team, $group_by_project);
GetOptions(
    'i|ids=s@'              => \@ids,
    't|team=s'              => \$team,
    'P|group_by_project'    => \$group_by_project
);

our @instances;
our @regions = ("us-west-2", "us-east-1");
our $region;

if (@ids) {
    for my $id (@ids) {
        chomp $id;
        for $region (@regions) {
            my $json = aws_ec2("describe-instances --filters Name=instance-id,Values=\Q$id\E --query 'Reservations[0].Instances[0]'");
            push @instances, $json if $json;
        }
    }
}
elsif ($team) {
    my $team_name = $team;
    for my $team_other (lc $team, ucfirst $team) {
        if ($team ne $team_other) {
            $team_name .= ",$team_other";
        }
    }

    for $region (@regions) {
        for my $tag (qw(team Team)) {
            my $json = aws_ec2("describe-instances --filters Name=tag:$tag,Values=\Q$team_name\E --query 'Reservations[*].Instances[*]'");
            if ($json) {
                for my $data (map { @$_ } @$json) {
                    push @instances, $data;
                }
            }
        }
    }
}
else {
    die "No instance IDs or teams provided\n";
}

for my $inst (@instances) {
    my %tags = map { lc $_->{Key}, $_->{Value} } @{$inst->{Tags}};
    $inst->{_tags} = \%tags;

    for my $vol (@{$inst->{BlockDeviceMappings} || []}) {
        my $id = $vol->{Ebs} ? $vol->{Ebs}{VolumeId} : '';
        die Dumper $vol unless $id;
        if ($id) {
            ($region = $inst->{Placement}{AvailabilityZone}) =~ s/[a-z]$//;
            my $vols = aws_ec2("describe-volumes --volume-ids $id");
            die "No volumes for $id" unless $vols->{Volumes} && ref($vols->{Volumes}) eq 'ARRAY';
            push @{$inst->{_volumes}}, @{$vols->{Volumes}};
        }
    }

    for my $vol (@{$inst->{_volumes}}) {
        my %tags = map { lc $_->{Key}, $_->{Value} } @{$vol->{Tags}};
        $vol->{_tags} = \%tags;
    }
}

my %data;
for my $inst (sort { $a->{_tags}{name} cmp $b->{_tags}{name} } @instances) {
    next if $inst->{State}{Name} eq 'terminated';
    my $host = {
        Team            => $inst->{_tags}{team},
        Project         => $inst->{_tags}{project},
        CreationDate    => $inst->{_tags}{creation_date},
        Creator         => $inst->{_tags}{creator},
        InstanceId      => $inst->{InstanceId},
        AZ              => $inst->{Placement}{AvailabilityZone},
        Type            => $inst->{InstanceType},
        State           => $inst->{State}{Name},
        Volumes         => [ map {
            {
                Id              => $_->{VolumeId},
                Size            => $_->{Size},
                Team            => $_->{_tags}{team}
            }
        } @{$inst->{_volumes}} ]
    };

#print Dumper $inst;

    if ($group_by_project) {
        $data{$inst->{_tags}{project}}{$inst->{_tags}{name}} = $host;
    }
    else {
        $data{$inst->{_tags}{name}} = $host;
    }
}

print JSON::XS->new->canonical(1)->pretty(1)->encode(\%data);


sub aws_ec2 {
    my($cmd) = @_;

    my $full_cmd = "aws ec2 --region $region $cmd";

    my $json = `$full_cmd`;
    my $err = $@;
    if ($err) {
        die "Cannot execute `$full_cmd`: $err";
    }

    if (length $json) {
        my $data = eval {
            decode_json($json);
        };
        my $jerr = $@;
        if ($jerr) {
            die "Cannot decode_json from `$full_cmd`: $err:\n$json\n\n-- \n\n";
        }

        return $data;
    }

    return undef;
}

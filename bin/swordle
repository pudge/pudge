#!/usr/bin/perl -s
use warnings;
use strict;
use feature ':5.10';
use POSIX qw(floor);

use Data::Dumper; $Data::Dumper::Sortkeys=1;

use File::Path qw(mkpath);
use LWP::Simple qw(get);
use JSON::XS qw(decode_json encode_json);
use Time::Local qw(timelocal);

use constant RED     => 31;
use constant GREEN   => 32;

my $DIR = "$ENV{HOME}/.swordle";



# usage:
#   $ swordle KNOWN FOUND TRIED...
#   $ swordle -S LETTERS # sacrifice words
#
# KNOWN is the known good letters, with positions (only [a-z.] allowed).
# if no known, just use '.'.
#
# FOUND is all the letters you found.
#
# TRIED is a list of the words you have tried.
#
# example:
#   $ swordle .o.u otun roate suing
#   count
#   fount
#   mount

use Data::Dumper; $Data::Dumper::Sortkeys=1;

# v verbose
# f New Letter Frequency Score
# s Scrabble Score
# n negate
# H never show color
# C give solution
our($v, $f, $s, $n, $H, $C);

if ($C) {
    print "Today's solution is ${\( color_str(solutions(1), RED, { bold => 1 }) )}, cheater\n";
    exit -1;
}

die "need at least two parameters; see 'usage' in source"
    unless scalar(@ARGV) >= 3;

our $LEN = 5;

our %SCRABBLE = (
    'a' => 1,
    'b' => 3,
    'c' => 3,
    'd' => 2,
    'e' => 1,
    'f' => 4,
    'g' => 2,
    'h' => 4,
    'i' => 1,
    'j' => 8,
    'k' => 5,
    'l' => 1,
    'm' => 3,
    'n' => 1,
    'o' => 1,
    'p' => 3,
    'q' => 10,
    'r' => 1,
    's' => 1,
    't' => 1,
    'u' => 1,
    'v' => 4,
    'w' => 4,
    'x' => 8,
    'y' => 4,
    'z' => 10,
);

my($correct_re, $found_re, $nfound_re, %found);

my $correct = lc shift @ARGV;
my $found   = lc shift @ARGV;
my @guesses = map lc, @ARGV;

$correct =~ s/[^a-z.]+//g;
$correct .= '.' until length($correct) >= $LEN;
my @correct = split '', $correct;
my %correct = map { $_ => 1 } @correct;

my @possible;
for (0..4) {
    $possible[$_] = $correct[$_] =~ /^[a-z]$/ ? [$correct[$_]] : ['a'..'z'];
}

for (@correct, split '', $found) {
    $found{$_}++ if /^[a-z]$/;
}

my %all;
for (@guesses) {
    my @guess = split '';
    for my $i (0..4) {
        my $letter = $guess[$i];
        $all{$letter}++;
        if (!$found{$letter}) {
            for (@possible) {
                @$_ = grep { $_ ne $letter } @$_;
            }
        }
        elsif (!$correct{$letter}) {
            @{ $possible[$i] } = grep { $_ ne $letter } @{ $possible[$i] };
        }
    }
}

($correct_re) = map { qr/^$_$/ } join '', map { @$_ == 1 ? $_->[0] : @$_ < 1 ? 'X' : '[' . join('', @$_) . ']' } @possible;
($found_re)   = map { qr/^$_/  } join '', map { "(?=.*$_)" } sort keys %found; # positive lookahead
($nfound_re)  = map { qr/^$_/  } join '', map { "(?!.*$_)" } sort keys %all; # negative lookahead

if ($v) {
    say $correct_re;
    say $found_re;
    say $nfound_re;
    say "";
}

my $solutions = solutions();

my(@words, %nlfs);
open my $dict, '<', '/usr/share/dict/words' or die "Cannot open dict: $!";
my %dict = map { chomp; { $_ => 1 } } <$dict>;
$dict{$_} = 1 for keys %$solutions;
#WORDS: while (my $line = <$dict>) {
WORDS: for my $line (sort keys %dict) {
#    chomp $line;
    if ($n) {
        next WORDS unless $line =~ /^[a-z]{5}$/ && $line =~ $nfound_re;
    }
    else {
        next WORDS unless $line =~ $correct_re && $line =~ $found_re;
    }

    if ($f || $s) {
        chomp $line;
        if ($f) {
            my %f = map { $_ => 1 } grep { !$found{$_} } split '', $line;
            $nlfs{$_}++ for keys %f;
        }
        push @words, $line;
    }
    else {
        say word($line);
    }
}

if ($f) {
    for (keys %nlfs) {
        $nlfs{$_} = ($nlfs{$_} / @words) / ( $LEN - keys(%found) );
    }

    my %words;
    for my $word (@words) {
        my %seen;
        $words{$word} = 0;
        for (split '', $word) {
            next if $seen{$_}++ || $found{$_};
            $words{$word} += $nlfs{$_};
        }
    }

    say "Sorted by New Letter Frequency Score (NLFS):";
    my $c = 0;
    for (sort { $words{$b} <=> $words{$a} || $a cmp $b } keys %words) {
        say sprintf "%s %0.2f", word($_), $words{$_};
    }
}
elsif ($s) {
    my %words;
    for my $word (@words) {
        my %seen;
        $words{$word} = 0;
        for (split '', $word) {
            $words{$word} += $SCRABBLE{$_};
        }
    }

    say "Sorted by Scrabble Score:";
    my $c = 0;
    for (sort { $words{$a} <=> $words{$b} || $a cmp $b } keys %words) {
        say sprintf "%s %2d", word($_), $words{$_};
    }
}

sub word {
    my($word) = @_;
    return $solutions->{$word} ? color_str($word, GREEN, { bold => 1 }) : $word;
}

sub solutions {
    my($cheat) = @_;

    my $today = get_date([ localtime(time) ]);
    my $solutions = fetch_solutions($today);
    return $solutions->{$today} if $cheat;
    return { map { $solutions->{$_} => 1 } grep { $_ lt $today } keys %$solutions };
}

sub get_solutions {
    mkpath($DIR);
    open my $sfile, '<', "$DIR/solutions" or return {};
    my $solutions = join '', <$sfile>;
    return decode_json($solutions);
}

sub save_solutions {
    my($solutions) = @_;
    mkpath($DIR);
    open my $sfile, '>', "$DIR/solutions" or die "Cannot open solutions: $!";
    print $sfile encode_json($solutions);
}

sub fetch_solutions {
    my($today) = @_;
    my $solutions = get_solutions();

    my($time, $date) = get_date();
    while ($date le $today) {
        unless ($solutions->{$date}) {
            my $json = LWP::Simple::get("https://www.nytimes.com/svc/wordle/v2/$date.json");
            $solutions->{$date} = decode_json($json)->{'solution'};
        }
        ($time, $date) = get_date($time + 86400);
    }
    save_solutions($solutions);
    return $solutions;
}

sub get_date {
    my($time) = @_;
    my @lt;
    if (ref $time) {
        @lt = @$time;
    }
    elsif ($time) {
        @lt = localtime($time);
    }
    else {
        @lt = (0, 0, 12, 19, 5, 121); # Jun 19 12:00:00 2021
        $time = timelocal(@lt);
    }

    my $date = sprintf '%04d-%02d-%02d', ($lt[5]+1900), $lt[4]+1, $lt[3];
    return($time, $date);
}

sub color_str {
    my($str, $color, $mod) = @_;
    return $str unless (-t STDIN && -t STDOUT && !$H);

    my $pre = 0;
    if ($mod->{bold}) {
        $pre = 1;
    }

    #print STDERR "$pre;$color\n";

    return $color ? "\e[${pre};${color}m${str}\e[0m" : $str;
}

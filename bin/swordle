#!/usr/bin/perl -s
use warnings;
use strict;
use feature ':5.10';

# usage:
#   $ swordle KNOWN FOUND TRIED...
#   $ swordle -S LETTERS # sacrifice words
#
# KNOWN is the known good letters, with positions (only [a-z.] allowed).
# if no known, just use '.'.
#
# FOUND is all the letters you found.
#
# TRIED is a list of the words you have tried.
#
# example:
#   $ swordle .o.u otun roate suing
#   count
#   fount
#   mount

use Data::Dumper; $Data::Dumper::Sortkeys=1;

our($v, $f, $n, $s, $S);

die "need at least two parameters; see 'usage' in source"
    unless ( scalar(@ARGV) >= 3 || ($S && scalar(@ARGV)) );

our $LEN = 5;

our %SCRABBLE = (
    'a' => 1,
    'b' => 3,
    'c' => 3,
    'd' => 2,
    'e' => 1,
    'f' => 4,
    'g' => 2,
    'h' => 4,
    'i' => 1,
    'j' => 8,
    'k' => 5,
    'l' => 1,
    'm' => 3,
    'n' => 1,
    'o' => 1,
    'p' => 3,
    'q' => 10,
    'r' => 1,
    's' => 1,
    't' => 1,
    'u' => 1,
    'v' => 4,
    'w' => 4,
    'x' => 8,
    'y' => 4,
    'z' => 10,
);

my($correct_re, $found_re, $nfound_re, %found);

if ($S) {
    my @letters = map lc, @ARGV;
    $correct_re = qr/^[a-z]{5}$/;
    ($found_re)  = map { qr/$_/  } '[' . join('', @letters) . ']';
    $f = 1;
}
else {
    my $correct = lc shift @ARGV;
    my $found   = lc shift @ARGV;
    my @guesses = map lc, @ARGV;

    $correct =~ s/[^a-z.]+//g;
    $correct .= '.' until length($correct) >= $LEN;
    my @correct = split '', $correct;
    my %correct = map { $_ => 1 } @correct;

    my @possible;
    for (0..4) {
        $possible[$_] = $correct[$_] =~ /^[a-z]$/ ? [$correct[$_]] : ['a'..'z'];
    }

    for (@correct, split '', $found) {
        $found{$_}++ if /^[a-z]$/;
    }

    my %all;
    for (@guesses) {
        my @guess = split '';
        for my $i (0..4) {
            my $letter = $guess[$i];
            $all{$letter}++;
            if (!$found{$letter}) {
                for (@possible) {
                    @$_ = grep { $_ ne $letter } @$_;
                }
            }
            elsif (!$correct{$letter}) {
                @{ $possible[$i] } = grep { $_ ne $letter } @{ $possible[$i] };
            }
        }
    }

    ($correct_re) = map { qr/^$_$/ } join '', map { @$_ == 1 ? $_->[0] : @$_ < 1 ? 'X' : '[' . join('', @$_) . ']' } @possible;
    ($found_re)   = map { qr/^$_/  } join '', map { "(?=.*$_)" } sort keys %found; # positive lookahead
    ($nfound_re)  = map { qr/^$_/  } join '', map { "(?!.*$_)" } sort keys %all; # negative lookahead
}

if ($v) {
    say $correct_re;
    say $found_re;
    say $nfound_re;
    say "";
}

my(@words, %nlfs);
open my $dict, '<', '/usr/share/dict/words' or die "Cannot open dict: $!";
WORDS: while (my $line = <$dict>) {
    if ($n) {
        next WORDS unless $line =~ /^[a-z]{5}$/ && $line =~ $nfound_re;
    }
    else {
        next WORDS unless $line =~ $correct_re && $line =~ $found_re;
    }

    if ($f || $s) {
        chomp $line;
        if ($f) {
            my %f = map { $_ => 1 } grep { !$found{$_} } split '', $line;
            $nlfs{$_}++ for keys %f;
        }
        push @words, $line;
    }
    else {
        print $line;
    }
}

if ($f) {
    for (keys %nlfs) {
        $nlfs{$_} = ($nlfs{$_} / @words) / ( $LEN - keys(%found) );
    }

    my %words;
    for my $word (@words) {
        my %seen;
        $words{$word} = 0;
        for (split '', $word) {
            next if $S && $_ !~ $found_re;
            next if $seen{$_}++ || $found{$_};
            $words{$word} += $nlfs{$_};
        }
    }

    say "Sorted by New Letter Frequency Score (NLFS):";
    my $c = 0;
    for (sort { $words{$b} <=> $words{$a} || $a cmp $b } keys %words) {
        say sprintf "%s %0.2f", $_, $words{$_};
    }
}
elsif ($s) {
    my %words;
    for my $word (@words) {
        my %seen;
        $words{$word} = 0;
        for (split '', $word) {
            $words{$word} += $SCRABBLE{$_};
        }
    }

    say "Sorted by Scrabble Score:";
    my $c = 0;
    for (sort { $words{$a} <=> $words{$b} || $a cmp $b } keys %words) {
        say sprintf "%s %2d", $_, $words{$_};
    }
}

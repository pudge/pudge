#!/usr/bin/perl -s
use warnings;
use 5.018;

use Git;

my $color_re = qr/(?:\c[\[\d*m)?/;
my $branch_re = qr/^(\*)? +$color_re(\w+) +$color_re([\w\/-]+)$color_re([<>=]+)?(?: $color_re(.+?))?$color_re$/;

sub iterm_mark () { "\e]133;A\x07" }

our($sub, $nod);
if ($sub) {
    opendir my $dh, '.' or die "Cannot open dir '.': $!";
    for my $dir (grep { -d "$_/.git" } grep { !/\./ } sort readdir $dh) {
        chdir $dir;
        say "#==============================";
        say iterm_mark, "git-brc on $dir\n";
        eval { brc($dir) };
        chdir '..';
        say "";
        #sleep 60;
    }
}
else {
    brc();
}

sub brc {
    my($repo, $current_branch) = get_branch();
    update_locals($repo, $current_branch);
    git_r_done($repo) unless $nod;
    report($repo);
}

sub get_branch {
    my $repo = Git->repository();
    chomp(my $current_branch = $repo->command('rev-parse', '--abbrev-ref', 'HEAD'));
    git_cmd_try { $repo->command_noisy('fetch') }
        'Error, cannot continue (%s [%d])';
    return($repo, $current_branch);
}

sub update_locals {
    my($repo, $current_branch) = @_;
    do_branches($repo, 'Updating local branches from remote', sub {
        my($branch_line, $current, $sha, $branch, $status) = @_;
        if ($status && $status eq '<') {
            if ($current_branch eq $branch) {
                eval { $repo->command_noisy('merge', '--ff-only', 'FETCH_HEAD') };
            }
            else {
                eval { $repo->command_noisy('fetch', 'origin', "$branch:$branch") };
            }
        }
    });
}

sub git_r_done {
    my($repo) = @_;
    do_branches($repo, 'Deleting merged branches', sub {
        my($branch_line, $current, $sha, $branch, $status) = @_;
        if (merged($repo, $branch, $status)) {
            git_cmd_try { $repo->command('r-done', $branch) }
                'Error, cannot continue (%s [%d])';
        }
    });
}

sub report {
    my($repo) = @_;
    do_branches($repo, 'Branches', sub {
        my($branch_line, $current, $sha, $branch, $status) = @_;
        say $branch_line;
    });
}

sub do_branches {
    my($repo, $name, $iter) = @_;
    # the `sta` alias is in my .gitconfig and looks like:
    # sta = !git for-each-ref --color=always --format='%(HEAD) %(refname:short)%(color:red)%(upstream:trackshort) %(color:yellow)%(upstream:track)' refs/heads
    my @branches = git_cmd_try { $repo->command('sta') }
        'Error, cannot continue (%s [%d])';

    my $said = 0;
    for my $branch_line (@branches) {
        say "$name:" unless $said++;
        $_ //= '' for (my($current, $sha, $branch, $status) = ($branch_line =~ $branch_re));
        $iter->($branch_line, $current, $sha, $branch, $status);
    }

    say '';
}

sub merged {
    my($repo, $branch, $status) = @_;
    if ($status && $branch =~ m!^pudge/!) {
        my $contains = git_cmd_try { $repo->command('branch', '--all', '--contains', "refs/heads/$branch") }
            'Error, cannot continue (%s [%d])';
        if ($contains =~ m!^\*?\s+remotes/origin/(?:master|main)$!m) {
            return 1;
        }
    }

    return 0;
}

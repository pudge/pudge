#!/usr/bin/perl
# USAGE: git-r-done
# generally, do this after the branch has been merged to master and deleted
#   remotely, such as after a GitHub PR
# checks out master, updates master from origin, and deletes the old branch
# safety checks to make sure you have no unstashed changes on the branch,
#   and that master contains the branch
use warnings;
use strict;

use Git;

my $repo = Git->repository();

chomp(my $current_branch = $repo->command('rev-parse', '--abbrev-ref', 'HEAD'));
my $branch = shift // $current_branch;

my $master;
for my $name (qw(master main)) {
    chomp(my $sha = $repo->command('rev-parse', '--short', "origin/$name"));
    if ($sha) {
        $master = $name;
        last;
    }
}
die "No master/main found" unless $master;

die "Cannot get branches, exiting\n" unless $branch && $current_branch;
die "Can't prune $master, exiting\n" if $branch eq $master;

if ($branch eq $current_branch) {
    git_cmd_try { $repo->command('diff', '--exit-code', '--quiet') }
        "Unstashed changes found on branch '$current_branch', cannot continue";
}

git_cmd_try { $repo->command_noisy('fetch', 'origin') }
    "Error, cannot continue (%s [%d])";

my $contains =
    git_cmd_try { $repo->command('branch', '--all', '--contains', "refs/heads/$branch") }
    "Error, cannot continue (%s [%d])";
die "$master does not include '$branch', exiting\n"
    if $contains !~ m!^\*?\s+remotes/origin/$master$!m;

git_cmd_try { $repo->command_noisy('checkout', $master) }
    "Error, cannot continue (%s [%d])";

git_cmd_try { $repo->command_noisy('merge', '--ff-only', "origin/$master") }
    "Error, cannot continue (%s [%d])";

git_cmd_try { $repo->command_noisy('branch', '-d', $branch) } # '-r',
    "Error, cannot continue (%s [%d])";

git_cmd_try { $repo->command_noisy('push', '-d', 'origin', $branch) }
    "Error, cannot continue (%s [%d])";

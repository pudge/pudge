BASH_NEW=$( if [[ "${BASH_VERSION/.*/}" -ge 5 ]]; then echo 1; else echo 0; fi )

function set_ps1 {
    if [[ "$ITERM_PROFILE" =~ demo ]]; then
        PS1='‚ùØ'
        return
    fi

    # git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
    if [ -r "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
        MYGITPROMPT=bash-git-prompt
        # Set config variables first
        GIT_PROMPT_ONLY_IN_REPO=1
        GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
        GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
        # GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments

        GIT_PROMPT_SHOW_UPSTREAM=0 # uncomment to show upstream tracking branch
        GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all; determines counting of untracked files
        GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=1 # uncomment to avoid printing the number of changed files

        # as last entry source the gitprompt script
        # GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
        GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh

        source $HOME/.bash-git-prompt/gitprompt.sh

    elif [ -r "$HOME/.git-prompt.sh" ]; then
        MYGITPROMPT=git-prompt
        GIT_PS1_SHOWSTASHSTATE=1
        GIT_PS1_SHOWDIRTYSTATE=1
        GIT_PS1_SHOWUNTRACKEDFILES=1
        GIT_PS1_SHOWUPSTREAM='auto'
        GIT_PS1_HIDE_IF_PWD_IGNORED=1
        GIT_PS1_SHOWCOLORHINTS=1
        #GIT_PS1_STATESEPARATOR='~'
        GIT_PS1_DESCRIBE_STYLE=branch

        source $HOME/.git-prompt.sh
    fi


    local ptime puser phost phist ppwd pgit pchar
    local black red green yellow blue magenta cyan white end
    black='\[\e[30m\]'
    red='\[\e[31m\]'
    yellow='\[\e[33m\]'
    green='\[\e[32m\]'
    cyan='\[\e[36m\]'
    blue='\[\e[34m\]'
    magenta='\[\e[35m\]'
    white='\[\e[37m\]'
    end='\[\e[0m\]'

    ptime="${white}\$(_my_date)${end} "
    puser="${red}\u${end}"
    phost=$(hostname -f | cut -d . -f 1,2)
    if [[ $phost == 'VG9CX2JYQ5' ]]; then
        phost=bergeron
    fi
    export PHOST=$phost
    phost="${yellow}$phost${end}"
    phist="${yellow}\!${end}"
    pchar="${blue}‚ùØ${end}"

    hostmarks="$red$(_host_marks)$end"
    precmd="\$(prompt_command)\n\[\$(iterm2_prompt_mark)\]$hostmarks$ptime$puser@$phost:${green}\$(get_pwd)${end}\$(git_url)" #$phist"
    postcmd="\$(_dyn_marks)\n\$(show_exit_status) $pchar "

    GIT_PROMPT_START="$precmd"
    GIT_PROMPT_END="$postcmd"

    if [[ $MYGITPROMPT == 'git-prompt' ]]; then
        __git_ps1 "$GIT_PROMPT_START" "$GIT_PROMPT_END"
    fi

    PS1="$precmd\$(show_exit_status)$postcmd"
    OLD_GITPROMPT="$PS1"
}

function prompt_command {
    history -a;
    wintitle;
}

function wintitle {
    if [[ $ITERM_SESSION_ID && ($PWD =~ "$HOME/src/eh/oz/") ]]; then
        echo -ne "\033]0;${PWD/#$HOME\/src\/oz\//} \007";
    else
        echo -ne "\033]0;${PHOST} \007";
    fi

}

function _my_date {
    date +'%Y-%m-%dT%H:%M:%S'
}

function _dyn_marks {
    if [[ -n "$AWS_PROFILE" ]]; then
        echo -ne ' üè∑Ô∏è  \001\e[34m\002'$AWS_PROFILE'\001\e[0m\002'
    fi
    if [[ -n "$K8S_NAMESPACE" ]]; then
        echo -ne ' ü´•  \001\e[35m\002'$K8S_NAMESPACE'\001\e[0m\002'
    fi
    if [[ -s "$JIRA_TRACK_TIME_FILE" ]]; then
        track_time_url="https://${$JIRA_HOST}/browse/"$(head -1 "$JIRA_TRACK_TIME_FILE")
        echo -ne '\e]8;;'$track_time_url'\e\\ ‚è± \e]8;;\e\\'
    fi
}

function iterm2_prompt_mark {
    echo -n ''
}

function _host_marks {
    if [[ -x /opt/bin/get_env.sh ]]; then
        local myenv=$(/opt/bin/get_env.sh | awk '{ print toupper($0) }')
        if [[ ! -z "$myenv" && "$myenv" != "UNKNOWN" && "$myenv" != "VBOX" ]]; then
            echo -n "‚ò¢Ô∏è $myenv‚ò¢Ô∏è  "
        fi
    fi
}

function show_exit_status {
    local es="$__bp_last_ret_value"

    # format from bash-git-prompt
    type gp_format_exit_status >/dev/null 2>&1
    if [[ "$?" -eq 0 ]]; then
        es=$(gp_format_exit_status $es)
    fi

    # 130 == SIGINT
    if [[ $es != '' && $es != '0' ]]; then
        if [[ "$BASH_NEW" -eq 1 ]]; then
            echo -ne '\001\e[31;1m\002‚úò '$es'\001\e[0m\002'
        else
            echo -ne '‚úò '$es''
        fi
    else
        if [[ "$BASH_NEW" -eq 1 ]]; then
            echo -ne '\001\e[32;1m\002‚úî\001\e[0m\002'
        else
            echo -ne '‚úî'
        fi
    fi
}

function git_url {
    if [[ "$BASH_NEW" -eq 1 ]]; then
        local git_http_url=$(get-git-url -b $(pwd))
        if [[ -n "$git_http_url" ]]; then
            echo -ne "\e]8;;"$git_http_url"\e\\ üíª\e]8;;\e\\"
        fi
    fi
}

function get_pwd {
    if [[ $PWD =~ "$HOME/src/eh/oz/" ]]; then
        echo -ne "${PWD/#$HOME\/src\/eh\/oz\//üå™Ô∏è  }";
    elif [[ $PWD =~ "$HOME/src/eh/oz" ]]; then
        echo -ne "${PWD/#$HOME\/src\/eh\/oz/üå™Ô∏è  }";
    else
        echo -ne "${PWD/#$HOME/\~}";
    fi
}

set_ps1

# black='\e[30m'
# red='\e[31m'
# yellow='\e[33m'
# green='\e[32m'
# cyan='\e[36m'
# blue='\e[34m'
# magenta='\e[35m'
# white='\e[37m'
# end='\e[0m'
#
# black_b='\e[30;1m'
# red_b='\e[31;1m'
# yellow_b='\e[33;1m'
# green_b='\e[32;1m'
# cyan_b='\e[36;1m'
# blue_b='\e[34;1m'
# magenta_b='\e[35;1m'
# white_b='\e[37;1m'


BASH_NEW=$( if [[ "${BASH_VERSION/.*/}" -ge 5 ]]; then echo 1; else echo 0; fi )

function set_ps1 {
    if [[ "$ITERM_PROFILE" =~ Demo || -f ~/.demo ]]; then
        PS1='❯ '
        return
    fi

    # git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
    if [ -r "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
        MYGITPROMPT=bash-git-prompt
        # Set config variables first
        GIT_PROMPT_ONLY_IN_REPO=1
        GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
        GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
        GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments

        GIT_PROMPT_SHOW_UPSTREAM=0 # uncomment to show upstream tracking branch
        GIT_PROMPT_SHOW_UNTRACKED_FILES=all # can be no, normal or all; determines counting of untracked files
        GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=1 # uncomment to avoid printing the number of changed files

        # as last entry source the gitprompt script
        GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh

        source $HOME/.bash-git-prompt/gitprompt.sh
    fi


    local ptime puser phost phist ppwd pgit pchar
    local black red green yellow blue magenta cyan white end
    local blue_bold
    black='\[\e[30m\]'
    red='\[\e[31m\]'
    yellow='\[\e[33m\]'
    green='\[\e[32m\]'
    cyan='\[\e[36m\]'
    blue='\[\e[34m\]'
    magenta='\[\e[35m\]'
    white='\[\e[37m\]'
    end='\[\e[0m\]'

    blue_bold='\[\e[34;1m\]'

    ptime="${white}\$(_my_date)${end} "
    puser="${red}\u${end}"
    phost=$(hostname -f | cut -d . -f 1,2)
    if [[ $phost == 'VG9CX2JYQ5' ]]; then
        phost=bergeron
    fi
    export PHOST=$phost
    phost="${yellow}$phost${end}"
    phist="${yellow}\!${end}"
    pchar="${blue_bold}❯${end}"

    #hostmarks="$red$(_host_marks)$end"
    hostmarks="$(_host_marks)"
    precmd1="\$(prompt_command)\n\[\$(iterm2_prompt_mark)\]$ptime$hostmarks"
    precmd2="$puser@$phost:${green}\$(get_pwd)${end}${cyan}\$(git_url)${end}"
    precmd="${precmd1}${precmd2}"
    postcmd="\$(_dyn_marks)\n\$(show_exit_status) $pchar "

    GIT_PROMPT_START="$precmd"
    GIT_PROMPT_END="$postcmd"

    if [[ $MYGITPROMPT == 'git-prompt' ]]; then
        __git_ps1 "$GIT_PROMPT_START" "$GIT_PROMPT_END"
    fi

    PS1="$precmd$postcmd"
}

function prompt_command {
    history -a;
    wintitle;
}

function wintitle {
    echo -ne "\033]0;${PHOST}"
    if [[ $PWD =~ "$HOME/src/eh/oz" ]]; then
        echo -ne " 🌪️";
    fi
    echo -ne " \007"
}

function _my_date {
    if [[ -n "$LTZ" ]]; then
        OTZ=$TZ
        export TZ=$LTZ
    fi
    hour=$(date +'%I')
    min=$(date +'%M')
    if [[ $BASH_NEW -eq 1 ]]; then
        iso8601=$(date -Iseconds)
        echo -ne "\e]8;;$iso8601\e\\"
    fi
    perl -CSDA -E '$x = hex q!1f54f!; $x += shift; $x += 12 if shift >= 30; print chr $x' $hour $min
    if [[ $BASH_NEW -eq 1 ]]; then
        echo -ne "\e]8;;\e\\"
    fi
    if [[ -n "$LTZ" ]]; then
        if [[ -n "$OTZ" ]]; then
            export TZ=$OTZ
        else
            unset TZ
        fi
    fi
}

function _dyn_marks {
    _jira_status
    if [[ -n "$AWS_PROFILE" ]]; then
        echo -ne ' ☁️ \001\e[34m\002'$AWS_PROFILE'\001\e[0m\002'
    fi
    if [[ -n "$K8S_NAMESPACE" ]]; then
        k8s_namespace=$(kubectl config view --minify -o jsonpath='{...namespace}')
        echo -ne ' 🫥 \001\e[35m\002'$k8s_namespace'\001\e[0m\002'
    fi
    if [[ -s "$JIRA_TRACK_TIME_FILE" ]]; then
        track_time_url="https://${JIRA_HOST}/browse/"$(head -1 "$JIRA_TRACK_TIME_FILE")
        echo -ne '\e]8;;'$track_time_url'\e\\ ⏱️ \e]8;;\e\\'
    fi
}

function _jira_status {
    jira_status=$( jira_status prompt 2>/dev/null );
    if [[ -n "$jira_status" ]]; then
        echo -ne " $jira_status"
    fi
}

function iterm2_prompt_mark {
    echo -n ''
}

function _host_marks {
    if [[ -x /opt/bin/get_env.sh ]]; then
        local myenv=$(/opt/bin/get_env.sh | awk '{ print toupper($0) }')
        if [[ ! -z "$myenv" && "$myenv" != "UNKNOWN" && "$myenv" != "VBOX" ]]; then
            echo -n "☢️ $myenv☢️  "
        fi
    fi
    if [[ -n "${IS_DEVCONTAINER}" ]]; then
        echo -n ' '
    fi
}

function show_exit_status {
    local es="$__bp_last_ret_value"

    # format from bash-git-prompt
    type gp_format_exit_status >/dev/null 2>&1
    if [[ "$?" -eq 0 ]]; then
        es=$(gp_format_exit_status $es)
    fi

    # 130 == SIGINT
    if [[ $es != '' && $es != '0' ]]; then
        if [[ "$BASH_NEW" -eq 1 ]]; then
            echo -ne '\001\e[31;1m\002✘ '$es'\001\e[0m\002'
            #echo -ne "${red_b}✘${end}${red} $es${end}"
        else
            echo -ne "✘ $es"
        fi
    else
        if [[ "$BASH_NEW" -eq 1 ]]; then
            echo -ne '\001\e[32;1m\002✔\001\e[0m\002'
            #echo -ne "${green_b}✔${end}"
        else
            echo -ne "✔"
        fi
    fi
}

function git_url {
    if [[ "$BASH_NEW" -eq 1 ]]; then
        local git_http_url=$(get-git-url -b $(pwd))
        if [[ -n "$git_http_url" ]]; then
            echo -ne " \e]8;;"$git_http_url"\e\\\e]8;;\e\\"
        else
            echo -ne " "
        fi
    else
        echo -ne " "
    fi
}

function get_pwd {
    if [[ $PWD =~ "$HOME/src/eh/oz/" ]]; then
        echo -ne "${PWD/#$HOME\/src\/eh\/oz\//🌪️ }";
    elif [[ $PWD =~ "$HOME/src/eh/oz" ]]; then
        echo -ne "${PWD/#$HOME\/src\/eh\/oz/🌪️ }";
    elif [[ $PWD =~ "/workspaces/oz/" ]]; then
        echo -ne "${PWD/#\/workspaces\/oz\//🌪️ }";
    elif [[ $PWD =~ "/workspaces/oz" ]]; then
        echo -ne "${PWD/#\/workspaces\/oz/🌪️ }";
    else
        if [[ $BASH_NEW -eq 1 ]]; then
            echo -n "${PWD/#$HOME/\~}";
        else
            echo -n "${PWD/#$HOME/~}";
        fi
    fi
}

set_ps1
